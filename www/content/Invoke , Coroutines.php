<?php include "../header/header.php"; ?><html><body><div class="container"><br><h1>Invoke , Coroutines</h1><br><br><br>During Game/App development, we might have a scenario where we want to run a piece of code after a particular amount of time. When we call a method, the code inside the method runs instantly. We can use invokes or coroutines if we want the code to run after a specific amount of time. So when should we Invoke a method and when should we use a coroutine?<br> <br><b>Invoke :</b><br>We use Invoke to run a method after a particular amount of time. <br><br><b> Syntax : </b><br><code>Invoke(" METHOD NAME IN STRING ", FLOAT_TIME);</code><br><b>Ex: </b> <br><code><br>   Invoke("fun",2);<br>   public void fun()<br>   {<br>    Debug.Log("Hi");<br>   }<br><br></code><br><br><b>Output: </b> The console prints "Hi" 2 seconds after the code is executed.<br><br><b>Coroutine :</b><br>A coroutine is like a function that has the ability to pause execution and return control to Unity but then to continue where it left off on the following frame. A coroutine is a function that can suspend its execution (yield) until the given YieldInstruction finishes.<br><b>Ex: </b><br><code><br>IEnumerator StartDelay()<br>        {<br>            yield return new WaitForSeconds(1.5f);<br>            MethodDoSomeThing();<br>            yield return new WaitForSeconds(0.5f);<br>            EndState();<br>        }<br></code><br> We can just call it in out method like this: <br><code><br>	StartCoroutine(StartDelay());<br>	or<br>	MonobehaviourHelper.Instance.StartCoroutine(StartDelay()); <br></code><br><br><b>Difference Between Invoke and Coroutine:</b><br>Both Invoke and StartCoroutine allow you to call a method by name (string). The differences are :<br>1. Invoke is useful if you want to do something one time only whereas Coroutines can be paused and resumed during the execution.<br>2. (From Unity Documentation) When you call a function, it runs to completion before returning. This effectively means that any action taking place in a function must happen within a single frame update; a function call can’t be used to contain a procedural animation or a sequence of events over time. As an example, consider the task of gradually reducing an object’s alpha (opacity) value until it becomes completely invisible.<br><br></div></body></html><br><br><?php include "../footer/footer.php"; ?>