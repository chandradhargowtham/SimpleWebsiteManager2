<?php include "../header/header.php"; ?><html><body><div class="container"><br><h1>Threads and Multithreading</h1><br><br><br>We keep hearing about multi threaded applications or hyper-threading technologies. So, What exactly is a thread?<br><br><b>Thread:</b><br>"A Thread is a set of instructions that are executed/processed by the CPU in parallel independent of each other's status."<br><br>A program can have one thread waiting for user input while the other thread does something else without stalling the application. <br><br><b>Ex: </b><br><img src="../content/images/2020-12-19thread.png" width="800" height="450"><br><br><br>Consider a game - When the game starts, it greets the user and shows instructions.  While the game is waiting for the user to finish reading the instructions or  input his name, it can download new updates in parallel. Once the downloads are successful, it can start preloading the game assets like the level, characters or other 3d artwork required during the gameplay into memory so that the user can play immediately without waiting for things to load.<br><br>We can also think of a process - a game or an application as a big cake. Threads are small pieces of cake which are divided into a number of pieces for independent and faster processing. These threads can share resources such as memory and global variables.<br><br><b>Multi threading : </b><br>In a single threaded application, instructions are processed one by one in a sequence.  Multithreading divides these tasks into separate threads/packages and are run in parallel and then these results are synchronized/collated. We will have a main thread from which small parallel tasks are run and the results are sent back and synchronized.<br><br><b>Race Conditions : </b><br>Imagine we have a program which:<br>1. Picks a value from a file/database and saves it in a variable 'x'; <br>2. if x>0 it prints "Positive" else "Not Positive"<br><br>Now, if we use 2 separate threads for these 2 sub tasks, Either:<br>A. Thread 1 picks the value (say 2) and assigns int x=2; Then Thread 2 checks of x>0 i.e 2>0 which is true. So it prints "Postive".<br>B. Thread 1 picks the value (say 2). before thread 1 can assign x=2, thread 2 checks x>0 i.e 0>0 (default value=0) which is false hence printing "Not Positive". Then Thread 1 assigns x=2.<br><br>Although this example isn't exactly the best one, it clearly shows that if we dont write the logic properly, we can get inconsistent results. This is what happened here :<br><br>Thread 2 did not wait for thread 1 to finish its task (main purpose of threads) and hence it took the wrong/unassigned value of the variable x providing wrong output.<br></div></body></html><br><br><?php include "../footer/footer.php"; ?>